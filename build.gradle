buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://repo.spongepowered.org/maven" }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
		classpath "org.spongepowered:mixingradle:0.6-SNAPSHOT"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

repositories {
    jcenter()
    maven {
	    url = "https://repo.spongepowered.org/maven"
    }
    maven {
        url = "http://maven.blamejared.com"
    }
    maven {
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        url = "http://maven.tterrag.com/"
    }
    maven {
        url = "http://maven.covers1624.net/"
    }
    maven {
        url = "https://modmaven.k-4u.nl/" 
    }
}

version = "1.12.2-2.0.0.0"
group= "thelm.textevents"
archivesBaseName = "TextEvents"

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    mappings = "stable_39"
    makeObfSourceJar = false
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        transitive = false
    }

    deobfCompile "mezz.jei:jei_1.12.2:4.15.0.273"
    deobfCompile "codechicken:CodeChickenLib:1.12.2-3.2.3.357:universal"
    deobfCompile "com.enderio.core:EnderCore:1.12.2-0.5.50"
}

processResources {
}

def modManifest = {
    attributes "FMLCorePlugin": "thelm.textevents.core.TextEventsLoadingPlugin"
    attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
    attributes "TweakOrder": 0
    attributes "FMLCorePluginContainsFMLMod": true
    attributes "ForceLoadAsMod": true
}

jar {
    manifest modManifest
	
	configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            rename 'LICENSE.txt', 'org/spongepowered/LICENSE.txt'

            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.RSA'
            exclude 'META-INF/*.MF'

            exclude '**/*.html'
        }
    }
}

mixin {
    add sourceSets.main, "mixins.textevents.refmap.json"
}

//copied from EnderCore
String getCN() {
    def firsts = ['Donald', 'Lex', 'Mike', 'Arthur', 'Bridget', 'Dorian', 'Ford', 'Guy', 'James', 'Jessica', 'John', 'Michael', 'Robinson', 'Zaphod', 'Bell', 'Penelope']
    def lasts = ['Trump', 'Luthor', 'Meyers', 'Dent', 'Jones', 'Gray', 'Prefect', 'Montag', 'Moriarty', 'Simpson', 'Watson', 'Smith', 'Corleone', 'Crusoe', 'Beeblebrox', 'Cranel', 'Akk']
    def rand = new Random()
    return firsts[rand.nextInt(firsts.size())] + ' ' + lasts[rand.nextInt(lasts.size())]
}

task mkKeyStore(type:Exec) {
   workingDir projectDir
   commandLine 'keytool', '-genkey', '-alias', 'signFiles', '-keystore', 'testore.jks', '-storepass', '123456', '-noprompt', '-dname', 'CN='+getCN(), '-keypass', '123456'
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    inputFile = jar.archivePath
    outputFile = jar.archivePath
    keyStore = 'testore.jks'
    alias = 'signFiles'
    storePass = '123456'
    keyPass = '123456'
}

task rmKeyStore(type: Delete) {
  delete 'testore.jks'
}

build.dependsOn rmKeyStore
rmKeyStore.dependsOn signJar
signJar.dependsOn mkKeyStore
